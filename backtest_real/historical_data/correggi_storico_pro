#!/usr/bin/perl -w

use Time::Local;
use Time::Piece;

open(FH, $ARGV[0]);
open(my $out, '>', 'somefile.txt') || die("Unable to open somefile.txt: $!");

my @matrix;

$i = 0;
$num_righe = 0;


while ( $line = <FH> ) {
	
	$num_righe++;
	
        if ( $line =~ /^(\d*\.\d*\.\d*)\,(\d*\:\d*)\,([\d\.]+)\,([\d\.]+)\,([\d\.]+)\,([\d\.]+)\,([\d]+)/) {

		$data = $1;
		$ora = $2;
		$open = $3;
		$high = $4;
		$low = $5;
		$close = $6;
		$volume = $7;

		($yyyy,$mm,$gg) = split(/[\s.]+/, $data);
		($hour,$min) = split(/[\s:]+/, $ora);
		$time = timelocal(0,$min,$hour,$gg,$mm-1,$yyyy);
	
		#print $i , "\n";
	
		if ( $i>0 ) {  

			if ( $time != ($matrix[$i-1][1] + 60) ) {

				if ( $time > ($matrix[$i-1][1] + 60) ) { # try to fill holes

					$N = ( $time - $matrix[$i-1][1] ) / 60 ;

					if ( $N <= 5 ) {

						for ($k=0; $k<=$N; $k++) {

							$matrix[$i+$k][1] = $matrix[$i-1][1] +$k*60;
							$matrix[$i+$k][2] = $matrix[$i-1][2] + $k*( $open - $matrix[$i-1][2] ) / $N;
							$matrix[$i+$k][3] = $matrix[$i-1][3] + $k*( $open - $matrix[$i-1][3] ) / $N;
							$matrix[$i+$k][4] = $matrix[$i-1][4] + $k*( $open - $matrix[$i-1][4] ) / $N;
							$matrix[$i+$k][5] = $matrix[$i-1][5] + $k*( $open - $matrix[$i-1][5] ) / $N;
							$matrix[$i+$k][6] = $matrix[$i-1][6] + $k*( $open - $matrix[$i-1][6] ) / $N;

							$strtime = localtime($matrix[$i+$k][1])->strftime('%Y.%m.%d,%H:%M');
							printf $out "%s,%1.4f,%1.4f,%1.4f,%1.4f,%d\n", $strtime, $matrix[$i+$k][2], 
								$matrix[$i+$k][3], $matrix[$i+$k][4], $matrix[$i+$k][5], $matrix[$i+$k][6];

						}

						$i += $N;
				
					} else { # if more than 5 missing points

						$timeMenoUno = $matrix[$i-1][1];				
						$strtimeMenoUno = localtime($timeMenoUno)->strftime('%Y.%m.%d,%H:%M');
						$strtime = localtime($time)->strftime('%Y.%m.%d,%H:%M');

						if ( $N <= 1440 ) {
							print $N ," data point missing on line ", $num_righe ," between ", $strtimeMenoUno," and ", $strtime , "\n";
							#die "More than one consecutive data point missing on line ", $num_righe ," after $strtime \n"
						}

						$matrix[$i][1] = $time;
						$matrix[$i][2] = $3;
						$matrix[$i][3] = $5;
						$matrix[$i][4] = $4;
						$matrix[$i][5] = $6;
						$matrix[$i][6] = $7;
						#print $time , "\n";
						$strtime = localtime($time)->strftime('%Y.%m.%d,%H:%M');
						print $out  $strtime, "," , $3, "," , $4, "," , $5, "," , $6, "," , $7  . "\n";

						$i++;

					}

				} # close the "try to fill holes"

			} else { # if there are no holes

				$matrix[$i][1] = $time;
				$matrix[$i][2] = $3;
				$matrix[$i][3] = $5;
				$matrix[$i][4] = $4;
				$matrix[$i][5] = $6;
				$matrix[$i][6] = $7;
				#print $time , "\n";
				$strtime = localtime($time)->strftime('%Y.%m.%d,%H:%M');
				print $out  $strtime, "," , $3, "," , $4, "," , $5, "," , $6, "," , $7  . "\n";

				$i++;
			
			}

		} else { # if it's the first point to write

			$matrix[$i][1] = $time;
			$matrix[$i][2] = $3;
			$matrix[$i][3] = $5;
			$matrix[$i][4] = $4;
			$matrix[$i][5] = $6;
			$matrix[$i][6] = $7;
			#print $time , "\n";
			$strtime = localtime($time)->strftime('%Y.%m.%d,%H:%M');
			print $out  $strtime, "," , $3, "," , $4, "," , $5, "," , $6, "," , $7  . "\n";

			$i++;

		}

	} else {

		#print "Riga ", $num_righe, " non valida: ", $line;

	}
}

print " FATTO \n";

close($out);

